You are an expert Python backend engineer.  
Generate production-grade Flask backend code for a project named **Weather Visualizer**.

Constraints:
- Only 1 file: `app.py`.
- Use Flask, Flask-CORS, requests, and environment variables.
- Required features:
  1. Get current weather by city/location
  2. Get 7-day forecast
  3. Store/retrieve user preferences
  4. Provide random “daily weather fun fact”
  5. Suggest activities based on weather
  6. Return Spotify playlists matched to weather (using Spotify API Client Credentials Flow)
  7. Return soothing background sound URLs mapped to weather condition
  8. location of the user should be taken automatically
______________________________________________________________________________

    🌤️ Core Weather Features
    1.	Current weather by automatic location detection.
    2.	7-day forecast with optional hourly breakdown.
    3.	Wind speed, humidity, UV index, rain/snow probability.
    4.	Severe weather alerts (storm, tornado, flood) integration.
    5.	Multi-unit support (°C/°F, km/h/mph).
    6.	Location search (city, coordinates) fallback.
    7.	Historical weather data retrieval (past 7–30 days).
______________________________________________________________________________
    👤 User Personalization
    8.	Save/retrieve user preferences (favorite locations, units, themes) using PostgreSQL.
    9.	Profile-based weather moods (“I love rainy days”).
    10.	Daily streaks or engagement tracking.
    11.	Custom alert triggers (temp drops, rain starts, wind alert).
    12.	Personalized greetings based on time & weather.
______________________________________________________________________________
    🎵 Entertainment & Engagement
    13.	Weather-based Spotify playlists (Client Credentials Flow).
    14.	Soothing background sounds mapped to weather conditions.
    15.	Daily weather fun fact or tip.
    16.	Weather-based activity suggestions.
    17.	Random global city weather feed (“Explore Weather”).
______________________________________________________________________________
    📡 Integrations & API Features
    18.	OpenWeather API integration (current, forecast, alerts).
    19.	Spotify API (Client Credentials Flow).
    20.	Push notifications for weather alerts & personal triggers (Firebase or OneSignal).
    21.	Optional Cloudinary integration for user-uploaded weather photos.
    22.	Geo-location API for automatic location detection.
    23.	Weather-based journaling or logging feature stored in PostgreSQL.
    24.	Travel or event recommendations based on forecast.
    25.	Integration with calendar or to-do apps for weather-aware planning.
    26.	Personalized home screen widgets for quick glance.
______________________________________________________________________________
    🔔 Notifications & Alerts
    27.	Instant mobile/weather push notifications via Firebase/OneSignal.
    28.	Set personal alert triggers (e.g., temperature drops below 15°C, rain starts, wind alert).
    29.	Emergency alert system integration (weather.gov / OpenWeather alerts).
______________________________________________________________________________
    💻 Developer & Deployment Features
    30.	Single-file Flask backend for simplicity (app.py).
    31.	Flask-CORS support for frontend integration.
    32.	Environment variables for all API keys.
    33.	PostgreSQL support via SQLAlchemy for user preferences, logs, alerts.
    34.	Rate-limiting to prevent abuse.
    35.	Scalable architecture for Render deployment.
    36.	Easy endpoint structure for frontend consumption.

- Spotify API:
  - Use environment variables for `SPOTIFY_CLIENT_ID` and `SPOTIFY_CLIENT_SECRET`.
  - Authenticate using Client Credentials Flow.
  - Map weather conditions → playlists (Sunny → Happy Vibes, Rain → Lo-Fi Beats, Snow → Cozy Winter, etc.).
- Soothing Sounds:
  - Map weather conditions → audio URLs (Sunny → birds.mp3, Rainy → rain.mp3, Snow → fireplace.mp3, Storm → thunder.mp3).
- Scalable for Render deployment.



🌤️ Weather Visualizer – Project Overview
“Not just a weather app — a daily experience.”
________________________________________
📌 Summary
Weather Visualizer is a modern, interactive weather application designed to deliver an immersive experience beyond simple temperature data. With real-time animated weather backgrounds, personalized user interaction, and global coverage, the app turns weather-checking into a fun, engaging, and addictive daily habit.
________________________________________
🎯 Purpose
The goal is to create a weather app that users enjoy visiting every day — not just for information, but for interaction, inspiration, and even entertainment. Weather Visualizer becomes a lifestyle companion that feels personal, playful, and smart.
________________________________________
🌐 Tech Stack
Frontend	Backend	API Integration	Hosting
ReactJS (w/ CSS Animations)	Flask	OpenWeather API	Frontend: Vercel <br> Backend: Render
Tailwind / Material UI	Flask-CORS	Optional: Cloudinary (photos), Firebase (push)	
Framer Motion / GSAP	SQLAlchemy (for user prefs)		
________________________________________
🖼️ Key Features
🌈 User Interface (UI)
•	Vibrant animated backgrounds for sun, rain, snow, wind
•	Clean and minimal design with bold weather info
•	Personal greetings like "Good Morning, Srinath!"
•	Dark mode & theme customization
•	Swipable hourly/weekly forecasts
🌟 User Engagement
•	Daily weather fun facts, records, or inspiration
•	Gamified streaks – earn badges by checking daily!
•	Custom alerts (e.g., “Rain in 30 mins!”)
•	Activity suggestions based on local weather
📡 Core Weather Features
•	Current weather with animated effects
•	Hourly & 7-day forecast
•	Wind speed, humidity, UV, and rain chance
•	Live radar through interactive map
•	Global location search
🎥 Visual & Social Add-ons
•	Upload and view user-submitted weather photos
•	“Explore Weather” – fun updates from random global cities
•	Create personalized "Weather Mood" playlists
________________________________________
🌍 Global Coverage
•	Supports multi-language UI: English, Hindi, Telugu
•	Location-specific messaging:
•	Monsoon alerts (India)
•	Tornado alerts (U.S.)
•	Snowstorm notifications (Europe)
•	Mix of real-time local and global feeds
________________________________________
🛠️ Customization
•	Set preferred weather units (°C/°F, km/h/mph)
•	Save favorite locations
•	Customize home screen widgets
•	Choose background themes (sunsets, clouds, night sky, etc.)
•	Profile-based preferences like: “I love rainy days”
________________________________________
🔔 Notifications & Alerts
•	Instant mobile/weather push notifications
•	Set personal alert triggers (e.g., temp drops below 15°C)
•	Emergency alert system integration (weather.gov / OpenWeather alerts)
________________________________________
✅ Hosting
Component	Platform	Purpose
📦 Frontend	Vercel
Fast, scalable static hosting + CI/CD
🧠 Backend	Render
Flask API serving weather data & preferences
🌤️ Weather API	OpenWeather
Real-time and forecast weather data
________________________________________
📈 Growth Opportunities
•	Weather-based journaling
•	Travel recommendation system based on current weather
•	Social feed of user weather clips/photos
________________________________________
🧩 Possible Integrations
•	Spotify API for weather-matched playlists
•	Google Calendar / To-Do integration for weather-based task planning
•	Apple/Android widget support
•	Progressive Web App (PWA) support for installable experience
________________________________________
🔓 Open Source Goals
This project can serve as:
•	A beautiful full-stack template
•	A beginner-friendly Open Weather API starter kit
•	An ideal project for frontend/backend portfolio
•	A scalable mobile app idea (convert to React Native)
________________________________________
📷 UI Preview (optional section for later)
•	Screenshot of rainy/sunny UI
•	GIF of background animation
•	Forecast swipe animation demo